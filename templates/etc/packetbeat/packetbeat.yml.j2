{#
 # First set default configuration from elasticbeats__beats_defaults
 #}
{% set _config = {} %}
{% for _default in elasticbeats__beats_defaults|d([]) %}
{%   if _default['name'] == 'packetbeat' and 'config' in _default %}
{#
 #  Only copy valid configuration keys for Beats 3.x
 #}
{%     if elasticbeats__version | version_compare('5.0-pre', '<') %}
{%       for _section in [ 'interfaces', 'protocols', 'output', 'shipper', 'logging' ] %}
{%         if _section in _default['config'] %}
{%           set _ = _config.update({_section: _default['config'][_section]}) %}
{%         endif %}
{%       endfor %}
{%     else %}
{%       for _key in _default['config'] %}
{%         set _ = _config.update({_key: _default['config'][_key]}) %}
{%       endfor %}
{%     endif %}
{%   endif %}
{% endfor %}
{#
 #  Overwrite defaults with user configuration
 #}
{% for _beat in elasticbeats__beats|d([]) %}
{%   if _beat['name'] == 'packetbeat' and 'config' in _beat %}
{%     if elasticbeats__version | version_compare('5.0-pre', '<') %}
{%       for _section in [ 'interfaces', 'protocols', 'output', 'shipper', 'logging' ] %}
{%         if _section in _beat['config'] %}
{%           if _section in _config %}
{%             set _ = _config.update({_section: (_config[_section] | combine(_beat['config'][_section], recursive=True))}) %}
{%           else %}
{%             set _ = _config.update({_section: _beat['config'][_section]}) %}
{%           endif %}
{%         endif %}
{%       endfor %}
{%     else %}
{%       for _key in _beat['config'] %}
{%         if _key in _config %}
{%           set _ = _config.update({_key: (_config[_key] | combine(_beat['config'][_key], recursive=True))}) %}
{%         else %}
{%           set _ = _config.update({_key: _beat['config'][_key]}) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endif %}
{% endfor %}
{#
 #  Migate configuration to Beats 5.x
 #}
{% if elasticbeats__version | version_compare('5.0-pre', '>=') %}
{%   for _deprecated in [ 'interfaces', 'protocols' ] %}
{%     if _deprecated in _config %}
{#
 # Check each key if it is already set via new syntax; if so, drop the old
 # value, otherwise convert to new syntax.
 #}
{%       if 'packetbeat' in _config %}
{%         if _deprecated in _config['packetbeat'] %}
{%           for _key in _config[_deprecated] %}
{%             if _key in _config['packetbeat'][_deprecated] %}
{%               set _ = _config[_deprecated].pop(_key) %}
{%             else %}
{%               set _ = _config['packetbeat'][_deprecated].update({_key: _config[_deprecated][_key]}) %}
{%               set _ = _config[_deprecated].pop(_key) %}
{%             endif %}
{%           endfor %}
{%         else %}
{%           set _ = _config['packetbeat'].update({_deprecated: _config[_deprecated]}) %}
{%           set _ = _config.pop(_deprecated) %}
{%         endif %}
{%       else %}
{%         for _key in _config[_deprecated] %}
{%           if ('packetbeat.' + _deprecated + '.' + _key) in _config %}
{%             set _ = _config[_deprecated].pop(_key) %}
{%           endif %}
{%         endfor %}
{%         set _ = _config.update({'packetbeat': {_deprecated: _config[_deprecated]}}) %}
{%         set _ = _config.pop(_deprecated) %}
{%       endif %}
{%     endif %}
{%   endfor %}
{%   for _shipper in _config['shipper'] %}
{%     set _ = _config.update(_shipper) %}
{%     set _ = _config['shipper'].pop(_shipper) %}
{%   endfor %}
{%   set _ = _config.pop('shipper') %}
{% endif %}
# {{ ansible_managed }}

{{ _config | to_nice_yaml }}
